{
	"info": {
		"_postman_id": "bbf5c793-a416-4f8c-a365-ae5613f8d2e1",
		"name": "books",
		"description": "### Get Started\n\nDive into this template to explore the full range of CRUD operations — **Create (POST), Read (GET), Update (PUT), and Delete (DELETE)** — along with variable handling and test execution.\n\n---\n\n### How to Use This Template\n\n**Step 1: Interact with the API**\n\nUse the provided collection to trigger RESTful endpoints. Each request type (GET, POST, PUT, DELETE) is included — just open any request and hit **Send** to see it in action.\n\n**Step 2: Explore the Response**\n\nCheck the **Response** tab for status codes (like `200 OK`), response time, and payload size to understand how the API behaves.\n\n**Step 3: Customize the Request Body**\n\nWant to send new data? Modify the **Body** of a POST request to create new entries, or use a PUT request to update existing data.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n**Step 4: Set Up Your Base URL**\n\nLeverage **variables** to simplify and customize your API workflow. This template includes a `base_url` variable pointing to a sample endpoint: `https://postman-api-learner.glitch.me`. Replace it with your own API root URL to tailor the collection to your project.\n\n**Step 5: Add Automated Tests**\n\nValidate your API responses by writing lightweight **test scripts** in the **\"Tests\"** tab. These scripts run after each request and display results in the **\"Test Results\"** panel — helping you confirm everything works as expected.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43360384"
	},
	"item": [
		{
			"name": "Register",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"john.doe@example.com\",\r\n  \"password\": \"securePassword123\",\r\n  \"repeatPassword\": \"securePassword123\",\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"shippingAddress\": \"123 Main St, City, Country\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/registration",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"user@example.com\",\r\n  \"password\": \"securePassword123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@example.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update or create category",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@example.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Fiction\",\r\n  \"description\": \"Fiction books\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update or create book",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "user@example.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Title11\",\r\n    \"author\": \"Updated Author\",\r\n    \"isbn\": \"978-92-95055-02-5\",\r\n    \"price\": 19.99,\r\n    \"description\": \"Updated description\",\r\n    \"coverImage\": \"https://example.com/updated-cover-image.jpg\",\r\n    \"categoryIds\": [1]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add item into cart",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "john.doe@example.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"quantity\": 2\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/cart",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put new item in cart",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@example.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 2,\r\n  \"quantity\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/cart/item/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"cart",
						"item",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "john.doe@example.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"shippingAddress\": \"my shipping address\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch order status",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@example.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "securePassword123",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"status\": \"DELIVERED\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/orders/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"orders",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/info?id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"info"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}